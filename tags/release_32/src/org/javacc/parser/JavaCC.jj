/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

/*
 * This file contains the grammar and actions that describe
 * JavaCCParser.  When passed as input to JavaCCParser it generates
 * another copy of itself.  Hence JavaCCParser may be modified by
 * modifying this file, and therefore this file is to be considered
 * the master version of JavaCCParser.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC=false;
}

PARSER_BEGIN(JavaCCParser)

/**
 * This file contains the code for JavaCCParser generated
 * by JavaCCParser itself.
 */

package org.javacc.parser;

public class JavaCCParser extends JavaCCParserInternals {

  /**
   * The name of the parser class.
   */
  String parser_class_name;

  /**
   * This flag is set to true when the part between PARSER_BEGIN and
   * PARSER_END is being parsed.
   */
  boolean processing_cu = false;

  /**
   * The level of class nesting.
   */
  int class_nesting = 0;

  /**
   * This int variable is incremented while parsing local lookaheads.
   * Hence it keeps track of *syntactic* lookahead nesting.
   * This is used to provide warnings when actions and nested lookaheads
   * are used in syntactic lookahead productions.  This is to prevent
   * typos such as leaving out the comma in LOOKAHEAD( foo(), {check()} ).
   */
  int inLocalLA = 0;

  /**
   * Set to true when the parser is within an action.
   */
  boolean inAction = false;

  /**
   * This flag keeps track of whether or not return and throw
   * statements have been patched during the parsing of a production.
   * The value of this flag is assigned the field with the same
   * name in BNFProduction.java.
   */
  boolean jumpPatched = false;

  /*
   * Returns true if the next token is not in the FOLLOW list of "expansion".
   * It is used to decide when the end of an "expansion" has been reached.
   */
  private boolean notTailOfExpansionUnit() {
    Token t;
    t = getToken(1);
    if (t.kind == BIT_OR || t.kind == COMMA || t.kind == RPAREN || t.kind == RBRACE || t.kind == RBRACKET) return false;
    return true;
  }

}

PARSER_END(JavaCCParser)

TOKEN_MGR_DECLS :
{
   int beginLine[] = new int[10];
   int beginCol[] = new int[10];
   int depth = 0;
   int size = 10;

   void saveBeginLineCol(int l, int c)
   {
      if (depth == size)
      {
         size += 5;
         int tmpbeginLine[] = new int[size];
         int tmpbeginCol[] = new int[size];

         System.arraycopy(beginLine, 0, beginLine = tmpbeginLine, 0, depth);
         System.arraycopy(beginCol, 0, beginCol = tmpbeginCol, 0, depth);
      }

      beginLine[depth] = l;
      beginCol[depth] = c;
      depth++;
   }

   void restoreBeginLineCol()
   {
      depth--;
      input_stream.adjustBeginLineColumn(beginLine[depth], beginCol[depth]);
   }
}


/**********************************************
 * THE JAVACC TOKEN SPECIFICATION STARTS HERE *
 **********************************************/

/* JAVACC RESERVED WORDS: These are the only tokens in JavaCC but not in Java */

TOKEN :
{
  < _OPTIONS: "options" >
| < _LOOKAHEAD: "LOOKAHEAD" >
| < _IGNORE_CASE: "IGNORE_CASE" >
| < _PARSER_BEGIN: "PARSER_BEGIN" >
| < _PARSER_END: "PARSER_END" >
| < _JAVACODE: "JAVACODE" >
| < _TOKEN: "TOKEN" >
| < _SPECIAL_TOKEN: "SPECIAL_TOKEN" >
| < _MORE: "MORE" >
| < _SKIP: "SKIP" >
| < _TOKEN_MGR_DECLS: "TOKEN_MGR_DECLS" >
| < _EOF: "EOF" >
}

/*
 * The remainder of the tokens are exactly (except for the removal of tokens
 * containing ">>" and "<<") as in the Java grammar and must be diff equivalent
 * (again with the exceptions above) to it.
 */

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
| "/*@egen*/" : AFTER_EGEN
                        
}

<AFTER_EGEN> SKIP :
{
  <~[]> { restoreBeginLineCol(); input_stream.backup(1); } : DEFAULT
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
|
  "/*@bgen(jjtree"
     {
        saveBeginLineCol(input_stream.getBeginLine(),
                         input_stream.getBeginColumn());
     } : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* JAVA RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* JAVA LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
	{ matchedToken.image = JavaCCGlobals.addUnicodeEscapes(matchedToken.image); }
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
//	| < LSHIFT: "<<" >
//	| < RSIGNEDSHIFT: ">>" >
//	| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
//	| < LSHIFTASSIGN: "<<=" >
//	| < RSIGNEDSHIFTASSIGN: ">>=" >
//	| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}


/************************************************
 * THE JAVACC GRAMMAR SPECIFICATION STARTS HERE *
 ************************************************/

void javacc_input() :
	{
	  String id1, id2;
	  initialize();
	}
{
  javacc_options()
  "PARSER_BEGIN" "(" id1=identifier()
	{
	  addcuname(id1);
	}
                 ")"
	{
	  processing_cu = true;
	  parser_class_name = id1;
	}
  CompilationUnit()
	{
	  processing_cu = false;
	}
  "PARSER_END" "(" id2=identifier()
	{
	  compare(getToken(0), id1, id2);
	}
               ")"
  ( production() )+
  <EOF>
}

void javacc_options() :
{}
{
  [ "options" "{" ( option_binding() )+ "}" ]
	{
	  Options.normalize();
	}
}

void option_binding() :
	{
	  String option_name;
	  int int_val;
	  boolean bool_val;
	  String string_val;
	  Token t = getToken(1);
	}
{
  ( <IDENTIFIER> | "LOOKAHEAD" | "IGNORE_CASE" | "static" )
	{
	  option_name = t.image;
	}
  "="
  (
    int_val = IntegerLiteral()
	{
	  Options.setInputFileOption(t, getToken(0), option_name, int_val);
	}
  |
    bool_val = BooleanLiteral()
	{
	  Options.setInputFileOption(t, getToken(0), option_name, bool_val);
	}
  |
    string_val = StringLiteral()
	{
	  Options.setInputFileOption(t, getToken(0), option_name, string_val);
	}
  )
  ";"
}

void production() :
{}
{
  LOOKAHEAD(1)
  /*
   * Since JAVACODE is both a JavaCC reserved word and a Java identifier,
   * we need to give preference to "javacode_production" over
   * "bnf_production".
   */
  javacode_production()
|
  LOOKAHEAD(1)
  /*
   * Since SKIP, TOKEN, etc. are both JavaCC reserved words and Java
   * identifiers, we need to give preference to "regular_expression_production"
   * over "bnf_production".
   */
  regular_expr_production()
|
  LOOKAHEAD(1)
  /*
   * Since TOKEN_MGR_DECLS is both a JavaCC reserved word and a Java identifier,
   * we need to give preference to "token_manager_decls" over
   * "bnf_production".
   */
  token_manager_decls()
|
  bnf_production()
}

void javacode_production() :
	{
	  String lhs;
	  JavaCodeProduction p = new JavaCodeProduction();
	  Token t = p.firstToken = getToken(1);
	  java.util.Vector excName;
	  p.throws_list = new java.util.Vector();
	  p.line = t.beginLine;
	  p.column = t.beginColumn;
	}
{
  "JAVACODE"
  ResultType(p.return_type_tokens)
  p.lhs=identifier()
  FormalParameters(p.parameter_list_tokens)
  [ "throws"
	{
	  excName = new java.util.Vector();
	}
    Name(excName)
	{
	  p.throws_list.addElement(excName);
	}
    (
	{
	  excName = new java.util.Vector();
	}
      "," Name(excName)
	{
	  p.throws_list.addElement(excName);
	}
    )*
  ]
  Block(p.code_tokens)
	{
	  p.lastToken = getToken(0);
	  addproduction(p);
	}
}

void bnf_production() :
	{
	  String lhs;
	  BNFProduction p = new BNFProduction();
	  Container c = new Container();
	  Token t = p.firstToken = getToken(1);
	  java.util.Vector excName;
	  p.throws_list = new java.util.Vector();
	  p.line = t.beginLine;
	  p.column = t.beginColumn;
	  jumpPatched = false;
	}
{
  ResultType(p.return_type_tokens)
  p.lhs=identifier()
  FormalParameters(p.parameter_list_tokens)
  [ "throws"
	{
	  excName = new java.util.Vector();
	}
    Name(excName)
	{
	  p.throws_list.addElement(excName);
	}
    (
	{
	  excName = new java.util.Vector();
	}
      "," Name(excName)
	{
	  p.throws_list.addElement(excName);
	}
    )*
  ]
  ":"
  Block(p.declaration_tokens)
  "{" expansion_choices(c) t="}"
	{
	  p.lastToken = t;
	  p.jumpPatched = jumpPatched;
	  production_addexpansion(p, (Expansion)(c.member));
	  addproduction(p);
	}
}

void regular_expr_production() :
	{
	  TokenProduction p = new TokenProduction();
	  java.util.Vector states;
	  Token t = p.firstToken = getToken(1);
	  p.line = t.beginLine;
	  p.column = t.beginColumn;
	}
{
	{
	  // set p.lexStates assuming there is no state spec.
	  // and then override if necessary.
	  p.lexStates = new String[1];
	  p.lexStates[0] = "DEFAULT";
	}
  [
    LOOKAHEAD(2) "<" "*" ">"
	{
	  p.lexStates = null;
	}
  |
    "<"
	{
	  states = new java.util.Vector();
	}
      t=<IDENTIFIER>
	{
	  states.addElement(t.image);
	}
      ( "," t=<IDENTIFIER>
	{
	  states.addElement(t.image);
	}
      )*
    ">"
	{
	  p.lexStates = new String[states.size()];
	  for (int i = 0; i < states.size(); i++) {
	    p.lexStates[i] = (String)states.elementAt(i);
	  }
	}
  ]
  regexpr_kind(p)
	{
	  if (p.kind != TokenProduction.TOKEN && Options.B("USER_TOKEN_MANAGER")) {
	    JavaCCErrors.warning(getToken(0), "Regular expression is being treated as if it were a TOKEN since option USER_TOKEN_MANAGER has been set to true.");
	  }
	}
  [
    "[" t="IGNORE_CASE" "]"
	{
	  p.ignoreCase = true;
	  if (Options.B("USER_TOKEN_MANAGER")) {
	    JavaCCErrors.warning(t, "Ignoring \"IGNORE_CASE\" specification since option USER_TOKEN_MANAGER has been set to true.");
	  }
	}
  ]
  ":"
  "{" regexpr_spec(p) ( "|" regexpr_spec(p) )* t="}"
	{
	  p.lastToken = t;
	  addregexpr(p);
	}
}

void token_manager_decls() :
	{
	  java.util.Vector decls = new java.util.Vector();
	  Token t;
	}
{
  t="TOKEN_MGR_DECLS" ":"
  ClassBody(decls)
	{
	  add_token_manager_decls(t, decls);
	}
}

void regexpr_kind(TokenProduction p) :
{}
{
  "TOKEN"
	{
	  p.kind = TokenProduction.TOKEN;
	}
|
  "SPECIAL_TOKEN"
	{
	  p.kind = TokenProduction.SPECIAL;
	}
|
  "SKIP"
	{
	  p.kind = TokenProduction.SKIP;
	}
|
  "MORE"
	{
	  p.kind = TokenProduction.MORE;
	}
}

void regexpr_spec(TokenProduction p) :
	{
	  Container c = new Container();
	  Action act = new Action();
	  Token t = null;
	  RegExprSpec res = new RegExprSpec();
	}
{
  regular_expression(c)
	{
	  res.rexp = (RegularExpression)c.member;
	  res.rexp.tpContext = p;
	}
  [
	{
	  t = getToken(1);
	}
    Block(act.action_tokens)
	{
	  if (Options.B("USER_TOKEN_MANAGER")) {
	    JavaCCErrors.warning(t, "Ignoring action in regular expression specification since option USER_TOKEN_MANAGER has been set to true.");
	  }
	  if (res.rexp.private_rexp) {
	    JavaCCErrors.parse_error(t, "Actions are not permitted on private (#) regular expressions.");
	  }
	}
  ]
  [ ":" t=<IDENTIFIER>
	{
	  res.nextState = t.image;
	  if (res.rexp.private_rexp) {
	    JavaCCErrors.parse_error(t, "Lexical state changes are not permitted after private (#) regular expressions.");
	  }
	}
  ]
	{
	  res.act = act;
	  res.nsTok = t;
	  p.respecs.addElement(res);
	}
}

void expansion_choices(Container c1) :
	{
	  boolean morethanone = false;
	  Choice ch = null; // unnecessary initialization to make Java compiler happy!
	  Container c2 = new Container();
	}
{
  expansion(c1)
  ( "|" expansion(c2)
	{
	  if (morethanone) {
	    ch.choices.addElement(c2.member);
	    ((Expansion)c2.member).parent = ch;
	  } else {
	    morethanone = true;
	    ch = new Choice();
	    ch.line = ((Expansion)c1.member).line;
	    ch.column = ((Expansion)c1.member).column;
	    ch.choices.addElement(c1.member);
	    ((Expansion)c1.member).parent = ch;
	    ch.choices.addElement(c2.member);
	    ((Expansion)c2.member).parent = ch;
	  }
	}
  )*
	{
	  if (morethanone) {
	    c1.member = ch;
	  }
	}
}

void expansion(Container c1) :
	{
	  Sequence seq = new Sequence();
	  Container c2 = new Container();
	  Lookahead la = new Lookahead();
	  Token t = getToken(1);
	  seq.line = t.beginLine;
	  seq.column = t.beginColumn;
	  la.line = t.beginLine;
	  la.column = t.beginColumn;
	}
{
	{
	  la.amount = Options.I("LOOKAHEAD");
	  la.la_expansion = null;
	  la.isExplicit = false;
	}
  ( LOOKAHEAD(1)
    t="LOOKAHEAD" "(" la=local_lookahead() ")"
	{
	  if (inLocalLA != 0 && la.amount != 0) {
	    JavaCCErrors.warning(t, "Only semantic lookahead specifications within other lookahead specifications is considered.  Syntactic lookahead is ignored.");
	  }
	}
  )?
	{
	  seq.units.addElement(la);
	}
  ( LOOKAHEAD(0, { notTailOfExpansionUnit() } )
    expansion_unit(c2)
	{
	  seq.units.addElement(c2.member);
	  ((Expansion)c2.member).parent = seq;
	  ((Expansion)c2.member).ordinal = seq.units.size()-1;
	}
  )+
	{
	  if (la.la_expansion == null) {
	    la.la_expansion = seq;
	  }
	  c1.member = seq;
	}
}

Lookahead local_lookahead() :
	{
	  Lookahead la = new Lookahead();
	  la.isExplicit = true;
	  Token t = getToken(1);
	  la.line = t.beginLine;
	  la.column = t.beginColumn;
	  la.la_expansion = null;
	  Container c = new Container();
	  boolean commaAtEnd = false, emptyLA = true;
	  inLocalLA++;
	}
{
  [
    /*
     * The lookahead of 1 is to turn off the warning message that lets
     * us know that an expansion choice can also start with an integer
     * literal because a primary expression can do the same.  But we
     * know that this is what we want.
     */
    LOOKAHEAD(1)
    la.amount = IntegerLiteral()
	{
	  emptyLA = false;
	}
  ]
  [ LOOKAHEAD(0, { !emptyLA && (getToken(1).kind != RPAREN) } )
    ","
	{
	  commaAtEnd = true;
	}
  ]
  [ LOOKAHEAD(0, { getToken(1).kind != RPAREN && getToken(1).kind != LBRACE } )
    expansion_choices(c)
	{
	  emptyLA = false; commaAtEnd = false;
	  la.la_expansion = (Expansion)c.member;
	}
  ]
  [ LOOKAHEAD(0, { !emptyLA && !commaAtEnd && (getToken(1).kind != RPAREN) } )
    ","
	{
	  commaAtEnd = true;
	}
  ]
  [ LOOKAHEAD(0, { emptyLA || commaAtEnd } )
    "{" Expression(la.action_tokens) "}"
	{
	  if (emptyLA) {
	    la.amount = 0;
	  }
	}
  ]
	{
	  inLocalLA--;
	  return la;
	}
}

void expansion_unit(Container c) :
	{
	  String name;
	  java.util.Vector lhsTokens = new java.util.Vector();
	  NonTerminal nt;
	  Action act;
	  Token t;
	  Lookahead la;
	}
{
  LOOKAHEAD(1)
  /*
   * We give this priority over primary expressions which use LOOKAHEAD as the
   * name of its identifier.
   */
  t="LOOKAHEAD" "(" la=local_lookahead() ")"
	{
	  // Now set the la_expansion field of la with a dummy
	  // expansion (we use EOF).
	  la.la_expansion = new REndOfFile();
	  // Create a singleton choice with an empty action.
	  Choice ch = new Choice();
	  ch.line = t.beginLine; ch.column = t.beginColumn;
	  Sequence seq = new Sequence();
	  seq.line = t.beginLine; seq.column = t.beginColumn;
	  seq.units.addElement(la);
	  la.parent = seq; la.ordinal = 0;
	  act = new Action();
	  act.line = t.beginLine; act.column = t.beginColumn;
	  seq.units.addElement(act);
	  act.parent = seq; act.ordinal = 1;
	  ch.choices.addElement(seq);
	  seq.parent = ch; seq.ordinal = 0;
	  if (la.amount != 0) {
	    if (la.action_tokens.size() != 0) {
	      JavaCCErrors.warning(t, "Encountered LOOKAHEAD(...) at a non-choice location.  Only semantic lookahead will be considered here.");
	    } else {
	      JavaCCErrors.warning(t, "Encountered LOOKAHEAD(...) at a non-choice location.  This will be ignored.");
	    }
	  }
	  c.member = ch;
	}
|
	{
	  act = new Action();
	  t = getToken(1);
	  act.line = t.beginLine;
	  act.column = t.beginColumn;
	  inAction = true;
	}
  Block(act.action_tokens)
	{
	  inAction = false;
	  if (inLocalLA != 0) {
	    JavaCCErrors.warning(t, "Action within lookahead specification will be ignored.");
	  }
	  c.member = act;
	}
|
  t="[" expansion_choices(c) "]"
	{
	  ZeroOrOne exp = new ZeroOrOne();
	  exp.line = t.beginLine;
	  exp.column = t.beginColumn;
	  exp.expansion = (Expansion)c.member;
	  ((Expansion)c.member).parent = exp;
	  c.member = exp;
	}
|
	{
	  Container expch = new Container();
	  java.util.Vector types = new java.util.Vector();
	  java.util.Vector ids = new java.util.Vector();
	  java.util.Vector catchblks = new java.util.Vector();
	  java.util.Vector finallyblk = null;
	  java.util.Vector vec = new java.util.Vector();
	  Token t0;
	}
  t0="try" "{" expansion_choices(expch) "}"
  ( "catch" "(" Name(vec) t=<IDENTIFIER> ")"
	{
	  types.addElement(vec);
	  ids.addElement(t);
	  vec = new java.util.Vector();
	  inAction = true;
	}
    Block(vec)
	{
	  inAction = false;
	  catchblks.addElement(vec);
	  vec = new java.util.Vector();
	}
  )*
  [
	{
	  inAction = true;
	}
    "finally" Block(vec)
	{
	  inAction = false;
	  finallyblk = vec;
	}
  ]
	{
	  makeTryBlock(t0, c, expch, types, ids, catchblks, finallyblk);
	}
|
  LOOKAHEAD(
    identifier()
  |
    StringLiteral()
  |
    "<"
  |
    PrimaryExpression() "="
  )
  [
    LOOKAHEAD(PrimaryExpression() "=")
	{
	  Token first = getToken(1);
	}
    PrimaryExpression()
	{
	  Token last = getToken(0);
	}
    "="
	{
	  t = first;
	  while (true) {
	    lhsTokens.addElement(t);
	    if (t == last) break;
	    t = t.next;
	  }
	}
  ]
  (
    regular_expression(c)
	{
	  ((RegularExpression)(c.member)).lhsTokens = lhsTokens;
	  add_inline_regexpr((RegularExpression)(c.member));
	}
  |
	{
	  nt = new NonTerminal();
	  t = getToken(1);
	  nt.line = t.beginLine;
	  nt.column = t.beginColumn;
	  nt.lhsTokens = lhsTokens;
	}
    name=identifier() Arguments(nt.argument_tokens)
	{
	  nt.name = name;
	  c.member = nt;
	}
  )
|
  t="(" expansion_choices(c) ")"
  (  "+"
	{
	  OneOrMore omexp = new OneOrMore();
	  omexp.line = t.beginLine;
	  omexp.column = t.beginColumn;
	  omexp.expansion = (Expansion)c.member;
	  ((Expansion)c.member).parent = omexp;
	  c.member = omexp;
	}
   | "*"
	{
	  ZeroOrMore zmexp = new ZeroOrMore();
	  zmexp.line = t.beginLine;
	  zmexp.column = t.beginColumn;
	  zmexp.expansion = (Expansion)c.member;
	  ((Expansion)c.member).parent = zmexp;
	  c.member = zmexp;
	}
   | "?"
	{
	  ZeroOrOne zoexp = new ZeroOrOne();
	  zoexp.line = t.beginLine;
	  zoexp.column = t.beginColumn;
	  zoexp.expansion = (Expansion)c.member;
	  ((Expansion)c.member).parent = zoexp;
	  c.member = zoexp;
	}
  )?
}

void regular_expression(Container c) :
	{
	  RStringLiteral strlit;
	  REndOfFile ef;
	  RJustName jn;
	  String image;
	  boolean private_rexp = false;
	  Token t = getToken(1);
	}
{
  image=StringLiteral()
	{
	  strlit = new RStringLiteral();
	  strlit.line = t.beginLine;
	  strlit.column = t.beginColumn;
	  strlit.image = image;
	  c.member = strlit;
	}
|
  LOOKAHEAD(3)
	{
	  image = "";
	}
  < LANGLE: "<" >
  [
    [ "#"
	{
	  private_rexp = true;
	}
    ]
    image=identifier() ":"
  ]
  complex_regular_expression_choices(c) < RANGLE: ">" >
	{
	  RegularExpression re;
	  if (c.member instanceof RJustName) {
	    RSequence seq = new RSequence();
	    seq.units.addElement(c.member);
	    re = seq;
	  } else {
	    re = (RegularExpression)c.member;
	  }
	  re.label = image;
	  re.private_rexp = private_rexp;
	  re.line = t.beginLine;
	  re.column = t.beginColumn;
	  c.member = re;
	}
|
  LOOKAHEAD(2)
  "<" image=identifier() ">"
	{
	  jn = new RJustName();
	  jn.line = t.beginLine;
	  jn.column = t.beginColumn;
	  jn.label = image;
	  c.member = jn;
	}
|
  "<" "EOF" ">"
	{
	  ef = new REndOfFile();
	  ef.line = t.beginLine;
	  ef.column = t.beginColumn;
	  ef.ordinal = 0;
	  c.member = ef;
	}
}

void complex_regular_expression_choices(Container c1) :
	{
	  boolean morethanone = false;
	  RChoice ch = null; // unnecessary initialization to make Java compiler happy!
	  Container c2 = new Container();
	}
{
  complex_regular_expression(c1)
  ( "|" complex_regular_expression(c2)
	{
	  if (morethanone) {
	    ch.choices.addElement(c2.member);
	  } else {
	    morethanone = true;
	    ch = new RChoice();
	    ch.line = ((RegularExpression)c1.member).line;
	    ch.column = ((RegularExpression)c1.member).column;
	    ch.choices.addElement(c1.member);
	    ch.choices.addElement(c2.member);
	  }
	}
  )*
	{
	  if (morethanone) {
	    c1.member = ch;
	  }
	}
}

void complex_regular_expression(Container c1) :
	{
	  int count = 0;
	  RSequence seq = null; // unnecessary initialization to make Java compiler happy!
	  Container c2 = new Container();
	}
{
  ( complex_regular_expression_unit(c2)
	{
	  count++;
	  if (count == 1) {
	    c1.member = c2.member; // if count does not go beyond 1, we are done.
	  } else if (count == 2) { // more than 1, so create a sequence.
	    seq = new RSequence();
	    seq.line = ((RegularExpression)c1.member).line;
	    seq.column = ((RegularExpression)c1.member).column;
	    seq.units.addElement(c1.member);
	    seq.units.addElement(c2.member);
	  } else {
	    seq.units.addElement(c2.member);
	  }
	}
  )+
	{
	  if (count > 1) {
	    c1.member = seq;
	  }
	}
}

void complex_regular_expression_unit(Container c) :
	{
	  String image;
	  RStringLiteral strlit;
	  RJustName jn;
	  Token t = getToken(1);
          int r1 = 0, r2 = -1;
	}
{
  image=StringLiteral()
	{
	  strlit = new RStringLiteral();
	  strlit.line = t.beginLine;
	  strlit.column = t.beginColumn;
	  strlit.image = image;
	  c.member = strlit;
	}
|
  "<" image=identifier() ">"
	{
	  jn = new RJustName();
	  jn.line = t.beginLine;
	  jn.column = t.beginColumn;
	  jn.label = image;
	  c.member = jn;
	}
|
  character_list(c)
|
  "(" complex_regular_expression_choices(c) ")"
  (  "+"
	{
	  ROneOrMore omrexp = new ROneOrMore();
	  omrexp.line = t.beginLine;
	  omrexp.column = t.beginColumn;
	  omrexp.regexpr = (RegularExpression)c.member;
	  c.member = omrexp;
	}
   | "*"
	{
	  RZeroOrMore zmrexp = new RZeroOrMore();
	  zmrexp.line = t.beginLine;
	  zmrexp.column = t.beginColumn;
	  zmrexp.regexpr = (RegularExpression)c.member;
	  c.member = zmrexp;
	}
   | "?"
	{
	  RZeroOrOne zorexp = new RZeroOrOne();
	  zorexp.line = t.beginLine;
	  zorexp.column = t.beginColumn;
	  zorexp.regexpr = (RegularExpression)c.member;
	  c.member = zorexp;
	}
   | "{" r1 = IntegerLiteral() [ "," r2 = IntegerLiteral() ] "}"
	{
	  RRepetitionRange rrrexp = new RRepetitionRange();
	  rrrexp.line = t.beginLine;
	  rrrexp.column = t.beginColumn;
	  rrrexp.min = r1;
	  rrrexp.max = r2;
	  rrrexp.regexpr = (RegularExpression)c.member;
	  c.member = rrrexp;
	}
  )?
}

void character_list(Container c1) :
	{
	  RCharacterList chlist = new RCharacterList();
	  Token t = getToken(1);
	  chlist.line = t.beginLine;
	  chlist.column = t.beginColumn;
	  Container c2 = new Container();
	}
{
  ["~"
	{
	  chlist.negated_list = true;
	}
  ]
  "[" [ character_descriptor(c2)
	{
	  chlist.descriptors.addElement(c2.member);
	}
        ( "," character_descriptor(c2)
	{
	  chlist.descriptors.addElement(c2.member);
	}
        )*
      ]
  "]"
	{
	  c1.member = chlist;
	}
}

void character_descriptor(Container c) :
	{
	  char c1, c2 = ' '; // unnecessary initialization to make Java compiler happy!
	  boolean isrange = false;
	  String imageL, imageR;
	  Token t = getToken(1);
	}
{
  imageL=StringLiteral()
	{
	  c1 = character_descriptor_assign(getToken(0), imageL);
	}
  [ "-" imageR=StringLiteral()
	{
	  isrange = true;
	  c2 = character_descriptor_assign(getToken(0), imageR, imageL);
	}
  ]
	{
	  if (isrange) {
	    CharacterRange cr = new CharacterRange();
	    cr.line = t.beginLine;
	    cr.column = t.beginColumn;
	    cr.left = c1;
	    cr.right = c2;
	    c.member = cr;
	  } else {
	    SingleCharacter sc = new SingleCharacter();
	    sc.line = t.beginLine;
	    sc.column = t.beginColumn;
	    sc.ch = c1;
	    c.member = sc;
	  }
	}
}

String identifier() :
	{
	  Token t;
	}
{
  t=<IDENTIFIER>
	{
	  return t.image;
	}
}

/**********************************************
 * THE JAVA GRAMMAR SPECIFICATION STARTS HERE *
 **********************************************/

/*
 * The Java grammar is modified to use sequences of tokens
 * for the missing tokens - those that include "<<" and ">>".
 */

/*
 * The following production defines Java identifiers - it
 * includes the reserved words of JavaCC also.
 */

Token JavaIdentifier() :
{}
{
(
  <IDENTIFIER>
| "options"
| "LOOKAHEAD"
| "IGNORE_CASE"
| "PARSER_BEGIN"
| "PARSER_END"
| "JAVACODE"
| "TOKEN"
| "SPECIAL_TOKEN"
| "MORE"
| "SKIP"
| "TOKEN_MGR_DECLS"
| "EOF"
)
	{
	  Token retval = getToken(0);
	  retval.kind = IDENTIFIER;
	  return retval;
	}
}

/*
 * The productions for the missing code follows.  Obviously
 * these productions accept more than what is legal in Java,
 * but that is OK for our purposes.
 */

void ShiftOps() :
{}
{
  "<" "<"
|
  ">" ">" [ ">" ]
}

void OtherAssignmentOps() :
{}
{
  "<" "<="
|
  ">" [ ">" ] ">="
}

/*
 * Program structuring syntax follows.
 */

void CompilationUnit() :
/*
 * The <EOF> is deleted since the compilation unit is embedded
 * within grammar code.
 */
	{
	  set_initial_cu_token(getToken(1));
	}
{
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*
	{
	  insertionpointerrors(getToken(1));
	}
}

void PackageDeclaration() :
{}
{
  "package" Name(new java.util.Vector()) ";"
}

void ImportDeclaration() :
{}
{
  "import" Name(new java.util.Vector()) [ "." "*" ] ";"
}

void TypeDeclaration() :
{}
{
  LOOKAHEAD( ( "abstract" | "final" | "public" )* "class" )
  ClassDeclaration()
|
  InterfaceDeclaration()
|
  ";"
}


/*
 * Declaration syntax follows.
 */

void ClassDeclaration() :
{}
{
  ( "abstract" | "final" | "public" )*
  UnmodifiedClassDeclaration()
}

void UnmodifiedClassDeclaration() :
	{
	  class_nesting++;
	  Token t;
	  boolean is_parser_class = false;
	}
{
  "class" t=JavaIdentifier() [ "extends" Name(new java.util.Vector()) ] [ "implements" NameList() ]
	{
	  if (t.image.equals(parser_class_name) && class_nesting == 1 && processing_cu) {
	    is_parser_class = true;
	    setinsertionpoint(getToken(1), 1);
	  }
	}
  ClassBody(new java.util.Vector())
	{
	  if (is_parser_class) {
	    setinsertionpoint(getToken(0), 2);
	  }
	  class_nesting--;
	}
}

void ClassBody(java.util.Vector tokens) :
/*
 * Parsing this fills "tokens" with all tokens of the block
 * excluding the braces at each end.
 */
	{
	  Token first, last;
	}
{
  "{"
	{
	  first = getToken(1);
	}
  ( ClassBodyDeclaration() )*
	{
	  last = getToken(0);
	}
  "}"
	{
	  if (last.next != first) { // i.e., this is not an empty sequence
	    Token t = first;
	    while (true) {
	      tokens.addElement(t);
	      if (t == last) break;
	      t = t.next;
	    }
	  }
	}
}

void NestedClassDeclaration() :
{}
{
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" )*
  UnmodifiedClassDeclaration()
}

void ClassBodyDeclaration() :
{}
{
  LOOKAHEAD(2)
  Initializer()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" )* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" )* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( [ "public" | "protected" | "private" ] Name(new java.util.Vector()) "(" )
  ConstructorDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" )*
  ResultType(new java.util.Vector()) JavaIdentifier() "("
}

void InterfaceDeclaration() :
{}
{
  ( "abstract" | "public" )*
  UnmodifiedInterfaceDeclaration()
}

void NestedInterfaceDeclaration() :
{}
{
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" )*
  UnmodifiedInterfaceDeclaration()
}

void UnmodifiedInterfaceDeclaration() :
{}
{
  "interface" JavaIdentifier() [ "extends" NameList() ]
  "{" ( InterfaceMemberDeclaration() )* "}"
}

void InterfaceMemberDeclaration() :
{}
{
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" )* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" )* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
}

void FieldDeclaration() :
{}
{
  ( "public" | "protected" | "private" | "static" | "final" | "transient" | "volatile" )*
  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";"
}

void VariableDeclarator() :
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId() :
{}
{
  JavaIdentifier() ( "[" "]" )*
}

void VariableInitializer() :
{}
{
  ArrayInitializer()
|
  Expression(new java.util.Vector())
}

void ArrayInitializer() :
{}
{
  "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"
}

void MethodDeclaration() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" )*
  ResultType(new java.util.Vector()) MethodDeclarator() [ "throws" NameList() ]
  ( Block(new java.util.Vector()) | ";" )
}

void MethodDeclarator() :
{}
{
  JavaIdentifier() FormalParameters(new java.util.Vector()) ( "[" "]" )*
}

void FormalParameters(java.util.Vector tokens) :
/*
 * Parsing this fills "tokens" with all tokens of the formal
 * parameters excluding the parentheses at each end.
 */
	{
	  Token first, last;
	}
{
  "("
	{
	  first = getToken(1);
	}
  [ FormalParameter() ( "," FormalParameter() )* ]
	{
	  last = getToken(0);
	}
  ")"
	{
	  if (last.next != first) { // i.e., this is not an empty sequence
	    Token t = first;
	    while (true) {
	      tokens.addElement(t);
	      if (t == last) break;
	      t = t.next;
	    }
	  }
	}
}

void FormalParameter() :
{}
{
  [ "final" ] Type() VariableDeclaratorId()
}

void ConstructorDeclaration() :
{}
{
  [ "public" | "protected" | "private" ]
  JavaIdentifier() FormalParameters(new java.util.Vector()) [ "throws" NameList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  "}"
}

void ExplicitConstructorInvocation() :
{}
{
  LOOKAHEAD("this" Arguments(new java.util.Vector()) ";")
  "this" Arguments(new java.util.Vector()) ";"
|
  [ LOOKAHEAD(2) PrimaryExpression() "." ] "super" Arguments(new java.util.Vector()) ";"
}

void Initializer() :
{}
{
  [ "static" ] Block(new java.util.Vector())
}


/*
 * Type, name and expression syntax follows.
 */

void Type() :
{}
{
  ( PrimitiveType() | Name(new java.util.Vector()) ) ( "[" "]" )*
}

void PrimitiveType() :
{}
{
  "boolean"
|
  "char"
|
  "byte"
|
  "short"
|
  "int"
|
  "long"
|
  "float"
|
  "double"
}

void ResultType(java.util.Vector tokens) :
	{
	  Token first = getToken(1);
	}
{
(
  "void"
|
  Type()
)
	{
	  Token last = getToken(0);
	  Token t = first;
	  while (true) {
	    tokens.addElement(t);
	    if (t == last) break;
	    t = t.next;
	  }
	}
}

void Name(java.util.Vector tokens) :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
	{
	  Token first = getToken(1);
	}
{
  JavaIdentifier()
  ( LOOKAHEAD(2) "." JavaIdentifier()
  )*
	{
	  Token last = getToken(0);
	  Token t = first;
	  while (true) {
	    tokens.addElement(t);
	    if (t == last) break;
	    t = t.next;
	  }
	}
}

void NameList() :
{}
{
  Name(new java.util.Vector())
  ( "," Name(new java.util.Vector())
  )*
}


/*
 * Expression syntax follows.
 */

void Expression(java.util.Vector tokens) :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
	{
	  Token first = getToken(1);
	}
{
  ConditionalExpression()
  [ 
    AssignmentOperator() Expression(new java.util.Vector())
  ]
	{
	  Token last = getToken(0);
	  Token t = first;
	  while (true) {
	    tokens.addElement(t);
	    if (t == last) break;
	    t = t.next;
	  }
	}
}

void AssignmentOperator() :
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "&=" | "^=" | "|="
|
  OtherAssignmentOps()
}

void ConditionalExpression() :
{}
{
  ConditionalOrExpression() [ "?" Expression(new java.util.Vector()) ":" ConditionalExpression() ]
}

void ConditionalOrExpression() :
{}
{
  ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
}

void ConditionalAndExpression() :
{}
{
  InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*
}

void InclusiveOrExpression() :
{}
{
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
}

void ExclusiveOrExpression() :
{}
{
  AndExpression() ( "^" AndExpression() )*
}

void AndExpression() :
{}
{
  EqualityExpression() ( "&" EqualityExpression() )*
}

void EqualityExpression() :
{}
{
  InstanceOfExpression() ( ( "==" | "!=" ) InstanceOfExpression() )*
}

void InstanceOfExpression() :
{}
{
  RelationalExpression() [ "instanceof" Type() ]
}

void RelationalExpression() :
{}
{
  /*
   * The lookahead of 2 below is due to the fact that we have split
   * the shift and shift assignment operator into multiple tokens that
   * now clash with these tokens.
   */
  ShiftExpression() ( LOOKAHEAD(2) ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
}

void ShiftExpression() :
{}
{
  /*
   * The lookahead of 2 below is due to the fact that we have split
   * the shift and shift assignment operator into multiple tokens that
   * now clash with these tokens and the relational operators.
   */
  AdditiveExpression() ( LOOKAHEAD(2) ( ShiftOps() ) AdditiveExpression() )*
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression() :
{}
{
  ( "+" | "-" ) UnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression() :
{}
{
  "++" PrimaryExpression()
}

void PreDecrementExpression() :
{}
{
  "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus() :
{}
{
  ( "~" | "!" ) UnaryExpression()
|
  LOOKAHEAD( CastLookahead() )
  CastExpression()
|
  PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name(new java.util.Vector()) "[")
  "(" Name(new java.util.Vector()) "[" "]"
|
  "(" Name(new java.util.Vector()) ")" ( "~" | "!" | "(" | JavaIdentifier() | "this" | "super" | "new" | Literal() )
}

void PostfixExpression() :
{}
{
  PrimaryExpression() [ "++" | "--" ]
}

void CastExpression() :
{}
{
  LOOKAHEAD("(" PrimitiveType())
  "(" Type() ")" UnaryExpression()
|
  LOOKAHEAD("(" Name(new java.util.Vector()))
  "(" Type() ")" UnaryExpressionNotPlusMinus()
}

void PrimaryExpression() :
{}
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix() :
{}
{
  Literal()
|
  "this"
|
  "super" "." JavaIdentifier()
|
  "(" Expression(new java.util.Vector()) ")"
|
  AllocationExpression()
|
  LOOKAHEAD( ResultType(new java.util.Vector()) "." "class" )
  ResultType(new java.util.Vector()) "." "class"
|
  Name(new java.util.Vector())
}

void PrimarySuffix() :
{}
{
  LOOKAHEAD(2)
  "." "this"
|
  LOOKAHEAD(2)
  "." AllocationExpression()
|
  "[" Expression(new java.util.Vector()) "]"
|
  "." JavaIdentifier()
|
  Arguments(new java.util.Vector())
}

void Literal() :
{}
{
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <CHARACTER_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
|
  NullLiteral()
}

int IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
	{
	  try {
	    return Integer.parseInt(token.image);
	  } catch (NumberFormatException e) {
	    throw new Error();
	  }
	}
}

boolean BooleanLiteral() :
{}
{
  "true"
	{
	  return true;
	}
|
  "false"
	{
	  return false;
	}
}

String StringLiteral() :
	{
	  Token t;
	}
{
  t=<STRING_LITERAL>
	{
	  return remove_escapes_and_quotes(t, t.image);
	}
}

void NullLiteral() :
{}
{
  "null"
}

void Arguments(java.util.Vector tokens) :
/*
 * Parsing this fills "tokens" with all tokens of the arguments
 * excluding the parentheses at each end.
 */
	{
	  Token first, last;
	}
{
  "("
	{
	  first = getToken(1);
	}
  [ ArgumentList() ]
	{
	  last = getToken(0);
	}
  ")"
	{
	  if (last.next != first) { // i.e., this is not an empty sequence
	    Token t = first;
	    while (true) {
	      tokens.addElement(t);
	      if (t == last) break;
	      t = t.next;
	    }
	  }
	}
}

void ArgumentList() :
{}
{
  Expression(new java.util.Vector()) ( "," Expression(new java.util.Vector()) )*
}

void AllocationExpression() :
{}
{
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimsAndInits()
|
  "new" Name(new java.util.Vector())
    (
      ArrayDimsAndInits()
    |
      Arguments(new java.util.Vector()) [ ClassBody(new java.util.Vector()) ]
    )
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits() :
{}
{
  LOOKAHEAD(2)
  ( LOOKAHEAD(2) "[" Expression(new java.util.Vector()) "]" )+ ( LOOKAHEAD(2) "[" "]" )*
|
  ( "[" "]" )+ ArrayInitializer()
}


/*
 * Statement syntax follows.
 */

void Statement() :
{}
{
  LOOKAHEAD(2)
  LabeledStatement()
|
  Block(new java.util.Vector())
|
  EmptyStatement()
|
  StatementExpression() ";"
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()
}

void LabeledStatement() :
{}
{
  JavaIdentifier() ":" Statement()
}

void Block(java.util.Vector tokens) :
/*
 * Parsing this fills "tokens" with all tokens of the block
 * excluding the braces at each end.
 */
	{
	  Token first, last;
	}
{
  "{"
	{
	  first = getToken(1);
	}
  ( BlockStatement() )*
	{
	  last = getToken(0);
	}
  "}"
	{
	  if (last.next != first) { // i.e., this is not an empty sequence
	    Token t = first;
	    while (true) {
	      tokens.addElement(t);
	      if (t == last) break;
	      t = t.next;
	    }
	  }
	}
}

void BlockStatement() :
{}
{
  LOOKAHEAD([ "final" ] Type() JavaIdentifier())
  LocalVariableDeclaration() ";"
|
  Statement()
|
  UnmodifiedClassDeclaration()
}

void LocalVariableDeclaration() :
{}
{
  [ "final" ] Type() VariableDeclarator() ( "," VariableDeclarator() )*
}

void EmptyStatement() :
{}
{
  ";"
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    "++"
  |
    "--"
  |
    AssignmentOperator() Expression(new java.util.Vector())
  ]
}

void SwitchStatement() :
{}
{
  "switch" "(" Expression(new java.util.Vector()) ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
}

void SwitchLabel() :
{}
{
  "case" Expression(new java.util.Vector()) ":"
|
  "default" ":"
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  "if" "(" Expression(new java.util.Vector()) ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

void WhileStatement() :
{}
{
  "while" "(" Expression(new java.util.Vector()) ")" Statement()
}

void DoStatement() :
{}
{
  "do" Statement() "while" "(" Expression(new java.util.Vector()) ")" ";"
}

void ForStatement() :
{}
{
  "for" "(" [ ForInit() ] ";" [ Expression(new java.util.Vector()) ] ";" [ ForUpdate() ] ")" Statement()
}

void ForInit() :
{}
{
  LOOKAHEAD( [ "final" ] Type() JavaIdentifier() )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList() :
{}
{
  StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

void BreakStatement() :
{}
{
  "break" [ JavaIdentifier() ] ";"
}

void ContinueStatement() :
{}
{
  "continue" [ JavaIdentifier() ] ";"
}

void ReturnStatement() :
	{
	  Token t;
	}
{
  t="return"
	{
	  // Add if statement to prevent subsequent code generated
	  // from being dead code.
	  if (inAction) {
	    t.image = "{if (true) return";
	    jumpPatched = true;
	  }
	}
  [
    Expression(new java.util.Vector())
  ]
  t=";"
	{
	  // Add closing brace for above if statement.
	  if (inAction) {
	    t.image = ";}";
	  }
	}
}

void ThrowStatement() :
	{
	  Token t;
	}
{
  t="throw"
	{
	  // Add if statement to prevent subsequent code generated
	  // from being dead code.
	  if (inAction) {
	    t.image = "{if (true) throw";
	    jumpPatched = true;
	  }
	}
  Expression(new java.util.Vector())
  t=";"
	{
	  // Add closing brace for above if statement.
	  if (inAction) {
	    t.image = ";}";
	  }
	}
}

void SynchronizedStatement() :
{}
{
  "synchronized" "(" Expression(new java.util.Vector()) ")" Block(new java.util.Vector())
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  "try" Block(new java.util.Vector())
  ( "catch" "(" FormalParameter() ")" Block(new java.util.Vector()) )*
  [ "finally" Block(new java.util.Vector()) ]
}
