\#include "JavaCC.h"
\#include "JJTree.h"
\#include "Node.h"
\#include "SimpleNode.h"
\#include "${PARSER_NAME}Visitor.h"

  _SimpleNode::_SimpleNode(int i) {
    id = i;
  }

  _SimpleNode::_SimpleNode(${PARSER_NAME} *p, int i) {
    id = i;
    parser = p;
  }

  int _SimpleNode::getId() {
    return id;
  }

  void _SimpleNode::jjtOpen() {
  }

  void _SimpleNode::jjtClose() {
  }

  void _SimpleNode::jjtSetParent(Node n) { parent = n; }
  Node _SimpleNode::jjtGetParent() { return parent; }

  void _SimpleNode::jjtAddChild(Node n, int i) {
    if (i >= children.size()) {
      children.resize(i + 1);
    }

    children[i] = n;
  }

  Node _SimpleNode::jjtGetChild(int i) {
    return i < children.size() ? children[i] : null;
  }

  int _SimpleNode::jjtGetNumChildren() {
    return children.size();
  }

  void _SimpleNode::jjtSetValue(Object value) { this->value = value; }
  Object _SimpleNode::jjtGetValue() { return value; }

#if TRACK_TOKENS
  Token _SimpleNode::jjtGetFirstToken() { return firstToken; }
  void _SimpleNode::jjtSetFirstToken(Token token) { this->firstToken = token; }
  Token _SimpleNode::jjtGetLastToken() { return lastToken; }
  void _SimpleNode::jjtSetLastToken(Token token) { this->lastToken = token; }

#fi
#if VISITOR
  /** Accept the visitor. **/
  ${VISITOR_RETURN_TYPE} _SimpleNode::jjtAccept(${PARSER_NAME}Visitor visitor, ${VISITOR_DATA_TYPE:-Object} data)
{
#if VISITOR_RETURN_TYPE_VOID
    visitor->visit(this, data);
#else
    return visitor->visit(this, data);
#fi
  }

  /** Accept the visitor. **/
  Object _SimpleNode::childrenAccept(${PARSER_NAME}Visitor visitor, ${VISITOR_DATA_TYPE:-Object} data) {
    for (int i = 0; i < children.size(); ++i) {
      children[i]->jjtAccept(visitor, data);
    }

    return data;
  }

#fi
  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  String _SimpleNode::toString() { return jjtNodeName[id]; }
  String _SimpleNode::toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  void _SimpleNode::dump(String prefix) {
    printf("%s\n", toString(prefix).c_str());
    for (int i = 0; i < children.size(); ++i) {
      SimpleNode n = (SimpleNode)children[i];
      if (n != null) {
        n->dump(prefix + " ");
      }
    }
  }

  _SimpleNode::~_SimpleNode() {
  }
