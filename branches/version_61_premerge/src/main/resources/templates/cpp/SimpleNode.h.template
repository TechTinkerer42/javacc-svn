\#ifndef SIMPLENODE_H
\#define SIMPLENODE_H
\#include <vector>
\#include "JavaCC.h"
\#include "Node.h"
\#include "${PARSER_NAME}TreeConstants.h"

typedef class _SimpleNode *SimpleNode;

class _SimpleNode : public ${NODE_EXTENDS:-_Node} {

  protected: Node parent;
  protected: std::vector<Node> children;
  protected: int id;
  protected: Object value;
  protected: ${PARSER_NAME} *parser;
  protected: int numChildren;
#if TRACK_TOKENS
  protected: Token firstToken;
  protected: Token lastToken;
#fi

  public: _SimpleNode(int i);
  public: _SimpleNode(${PARSER_NAME} *p, int i);

#if NODE_FACTORY
\#define jjtCreate(id) new _SimpleNode(id)
\#define jjtCreate(p, id) new _SimpleNode(p, id)
#fi

  public: virtual int getId();
  public: virtual void jjtOpen();
  public: virtual void jjtClose();
  public: virtual void jjtSetParent(Node n);
  public: virtual Node jjtGetParent();
  public: virtual void jjtAddChild(Node n, int i);
  public: virtual Node jjtGetChild(int i);
  public: virtual int jjtGetNumChildren();
  public: virtual void jjtSetValue(Object value);
  public: virtual Object jjtGetValue();

#if TRACK_TOKENS
  public: virtual Token jjtGetFirstToken();
  public: virtual void jjtSetFirstToken(Token token);
  public: virtual Token jjtGetLastToken();
  public: virtual void jjtSetLastToken(Token token);

#fi
#if VISITOR
  /** Accept the visitor. **/
  public: virtual ${VISITOR_RETURN_TYPE} jjtAccept(${PARSER_NAME}Visitor visitor, ${VISITOR_DATA_TYPE:-Object} data);
#fi

  /** Accept the visitor. **/
  public: virtual Object childrenAccept(${PARSER_NAME}Visitor visitor, ${VISITOR_DATA_TYPE:-Object} data);
  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public: virtual String toString();
  public: virtual String toString(String prefix);

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public: virtual void dump(String prefix);
  public: virtual ~_SimpleNode();
};

\#endif
