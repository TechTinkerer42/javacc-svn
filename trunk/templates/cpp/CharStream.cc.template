\#include "CharStream.h"

#if NAMESPACE
namespace ${NAMESPACE} {
#fi

  void CharStream::setTabSize(int i) { tabSize = i; }
  int CharStream::getTabSize() { return tabSize == 0 ? 8 : tabSize; }

/** @return starting character for token. */
  JAVACC_CHAR_TYPE CharStream::BeginToken()
  {
    assert(!endOfInput());
    JAVACC_CHAR_TYPE c = readChar();
    tokenBegin = bufpos;
    return c;
  }

  JAVACC_CHAR_TYPE CharStream::readChar()
  {
    assert(!endOfInput());
    if (inBuf > 0)
    {
      --inBuf;
      return buffer[++bufpos];
    }

    //if (++bufpos >= bufsize) {
      //--bufpos;
      //return 0;
    //}

    JAVACC_CHAR_TYPE c=buffer[++bufpos];
#if KEEP_LINE_COLUMN
    UpdateLineColumn(c);
#fi
    return c;
  }

  void CharStream::UpdateLineColumn(JAVACC_CHAR_TYPE c)
  {
    column++;

    if (prevCharIsLF)
    {
      prevCharIsLF = false;
      column = 1;
      line ++;
    }
    else if (prevCharIsCR)
    {
      prevCharIsCR = false;
      if (c == '\n') {
        prevCharIsLF = true;
      } else {
        column = 1;
        line ++;
      }
    }

    switch (c)
    {
      case '\r' :
        prevCharIsCR = true;
        break;
      case '\n' :
        prevCharIsLF = true;
        break;
      case '\t' :
        column--;
        column += (tabSize - (column % tabSize));
        break;
      default :
        break;
    }

    bufline[bufpos] = line;
    bufcolumn[bufpos] = column;
  }

  /**
   * @deprecated
   * @see #getEndColumn
   */
  int CharStream::getColumn() {
    return bufcolumn[bufpos];
  }

  /**
   * @deprecated
   * @see #getEndLine
   */
  int CharStream::getLine() {
    return bufline[bufpos];
  }

/** Get end column. */
  int CharStream::getEndColumn() {
    return bufcolumn[bufpos];
  }

/** Get end line. */
  int CharStream::getEndLine() {
    return bufline[bufpos];
  }

/** @return column of token start */
  int CharStream::getBeginColumn() {
    return bufcolumn[tokenBegin];
  }

/** @return line number of token start */
  int CharStream::getBeginLine() {
    return bufline[tokenBegin];
  }

/** Retreat. */
  void CharStream::backup(int amount) {
    inBuf += amount;
    bufpos -= amount;
  }

  bool CharStream::endOfInput() {
    return bufpos != -1 && bufpos == bufsize - 1;
  }

  CharStream::CharStream(const JAVACC_CHAR_TYPE *buf,int sz, int startline, int startcolumn) {
    ReInit(buf, sz, startline, startcolumn);
    tabSize = 8;
  }

  void CharStream::ReInit(const JAVACC_CHAR_TYPE *buf,int sz, int startline, int startcolumn) {
    line = startline;
    column = startcolumn - 1;

    bufsize = sz;
    buffer = buf;
    bufline = new int[sz];
    bufcolumn = new int[sz];
    tokenBegin = inBuf = 0;
    bufpos = -1;
    prevCharIsLF = prevCharIsCR = false;
  }

  /** @return token image as string */
  JAVACC_STRING_TYPE CharStream::GetImage()
  {
    return JAVACC_STRING_TYPE((JAVACC_CHAR_TYPE*)"").append(buffer+tokenBegin, bufpos - tokenBegin + 1);
  }

  /** @return suffix */
  JAVACC_STRING_TYPE CharStream::GetSuffix(int len)
  {
    return JAVACC_STRING_TYPE((JAVACC_CHAR_TYPE*)"").append(buffer+ bufpos - len + 1, len);
  }

  /** Set buffers back to NULL when finished. */
  CharStream::~CharStream() {
    Done();
  }

  void CharStream::Done()
  {
    delete[] bufline;
    delete[] bufcolumn;
  }

#if NAMESPACE
}
#fi
