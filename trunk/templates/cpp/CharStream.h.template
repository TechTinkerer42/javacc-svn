\#ifndef CHARSTREAM_H
\#define CHARSTREAM_H
\#include "JavaCC.h"

#if NAMESPACE
namespace ${NAMESPACE} {
#fi

/**
 * This class describes a character stream that maintains line and
 * column number positions of the characters.  It also has the capability
 * to backup the stream to some extent.  An implementation of this
 * class is used in the TokenManager implementation generated by
 * JavaCCParser.
 *
 * All the methods except backup can be implemented in any fashion. backup
 * needs to be implemented correctly for the correct operation of the lexer.
 * Rest of the methods are all used to get information like line number,
 * column number and the string that constitutes a token and are not used
 * by the lexer. Hence their implementation won't affect the generated lexer's
 * operation.
 */


class CharStream {
/** Position in buffer. */
  int bufpos;
  int bufsize;
  int tokenBegin;

  const JAVACC_CHAR_TYPE * buffer;
  int *bufline;
  int *bufcolumn;

  int column;
  int line;

  bool prevCharIsCR ;
  bool prevCharIsLF ;

  int inBuf ;
  int tabSize ;

   public:
  void setTabSize(int i);
  int getTabSize();
  void UpdateLineColumn(JAVACC_CHAR_TYPE c);

  /**
   * Returns the next character from the selected input.  The method
   * of selecting the input is the responsibility of the class
   * implementing this class.
   */
  virtual JAVACC_CHAR_TYPE readChar();

  /**
   * Returns the column position of the character last read.
   * @deprecated
   * @see #getEndColumn
   */
  virtual int getColumn();

  /**
   * Returns the line number of the character last read.
   * @deprecated
   * @see #getEndLine
   */
  virtual int getLine();

  /**
   * Returns the column number of the last character for current token (being
   * matched after the last call to BeginTOken).
   */
  virtual int getEndColumn();

  /**
   * Returns the line number of the last character for current token (being
   * matched after the last call to BeginTOken).
   */
  virtual int getEndLine();

  /**
   * Returns the column number of the first character for current token (being
   * matched after the last call to BeginTOken).
   */
  virtual int getBeginColumn();

  /**
   * Returns the line number of the first character for current token (being
   * matched after the last call to BeginTOken).
   */
  virtual int getBeginLine();

  /**
   * Backs up the input stream by amount steps. Lexer calls this method if it
   * had already read some characters, but could not use them to match a
   * (longer) token. So, they will be used again as the prefix of the next
   * token and it is the implemetation's responsibility to do this right.
   */
  virtual void backup(int amount);

  /**
   * Returns the next character that marks the beginning of the next token.
   * All characters must remain in the buffer between two successive calls
   * to this method to implement backup correctly.
   */
  virtual JAVACC_CHAR_TYPE BeginToken();

  /**
   * Returns a string made up of characters from the marked token beginning
   * to the current buffer position. Implementations have the choice of returning
   * anything that they want to. For example, for efficiency, one might decide
   * to just return NULL, which is a valid implementation.
   */
  virtual JAVACC_STRING_TYPE GetImage();

  /**
   * Returns an array of characters that make up the suffix of length 'len' for
   * the currently matched token. This is used to build up the matched string
   * for use in actions in the case of MORE. A simple and inefficient
   * implementation of this is as follows :
   *
   *   {
   *      JAVACC_STRING_TYPE t = GetImage();
   *      return t.substring(t.length() - len, t.length()).toCharArray();
   *   }
   */
  virtual JAVACC_STRING_TYPE GetSuffix(int len);

  /**
   * The lexer calls this function to indicate that it is done with the stream
   * and hence implementations can free any resources held by this class.
   */
  virtual void Done();

  /**
   * pointer tobufer buf will be released on ReInit or delete.
   */
  CharStream(const JAVACC_CHAR_TYPE *buf,int sz, int startline, int startcolumn);

  /**
   * pointer tobufer buf will be released on ReInit or delete.
   */
  public: virtual void ReInit(const JAVACC_CHAR_TYPE *buf, int sz, int startline, int startcolumn);
  public: virtual ~CharStream();
  public: virtual bool endOfInput();

};

#if NAMESPACE
}
#fi
\#endif
