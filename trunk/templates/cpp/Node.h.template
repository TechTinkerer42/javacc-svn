\#ifndef NODE_H
\#define NODE_H
\#include "JavaCC.h"

/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. */

typedef class _Node *Node;
class ${PARSER_NAME};
#if VISITOR
typedef class _${PARSER_NAME}Visitor *${PARSER_NAME}Visitor;
#fi
class _Node {

  /** This method is called after the node has been made the current
    node.  It indicates that child nodes can now be added to it. */
  public: virtual void jjtOpen() = 0;

  /** This method is called after all the child nodes have been
    added. */
  public: virtual void jjtClose() = 0;

  /** This pair of methods are used to inform the node of its
    parent. */
  public: virtual void jjtSetParent(Node n) = 0;
  public: virtual Node jjtGetParent() = 0;

  /** This method tells the node to add its argument to the node's
    list of children.  */
  public: virtual void jjtAddChild(Node n, int i) = 0;

  /** This method returns a child node.  The children are numbered
     from zero, left to right. */
  public: virtual Node jjtGetChild(int i) = 0;

  /** Return the number of children the node has. */
  public: virtual int jjtGetNumChildren() = 0;
#if VISITOR

  /** Accept the visitor. **/
  public: virtual ${VISITOR_RETURN_TYPE} jjtAccept(${PARSER_NAME}Visitor visitor, ${VISITOR_DATA_TYPE:-Object} data) = 0;
#fi
  public: virtual ~_Node() { }
};
\#endif
