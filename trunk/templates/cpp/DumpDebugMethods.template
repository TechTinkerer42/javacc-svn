  const JAVACC_STRING_TYPE ${tokMgrClassName}::jjKindsForBitVector(int i, unsigned long long vec)
  {
    int kindCnt = 0;
    JAVACC_STRING_TYPE retVal = (JAVACC_CHAR_TYPE*)"";
    if (i == 0)
       kindCnt = 0;
    for (int j = 0; j < 64; j++)
    {
       if ((vec & (1L << j)) != 0L)
       {
          if (kindCnt++ > 0)
             retVal += ", ";
          if (kindCnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[i * 64 + j];
       }
    }

    return retVal;
  }

  const JAVACC_STRING_TYPE ${tokMgrClassName}::jjKindsForStateVector(int lexState, int vec[], int start, int end)
  {
    bool kindDone[${maxOrdinal}];
    JAVACC_STRING_TYPE retVal = (JAVACC_CHAR_TYPE*)"";
    int cnt = 0;
    for (int i = start; i < end; i++)
    {
     if (vec[i] == -1)
       continue;
     const int *stateSet = statesForState[curLexState][vec[i]];
     for (int j = 0; j < ${stateSetSize}; j++)
     {
       int state = stateSet[j];
       if (!kindDone[kindForState[lexState][state]])
       {
          kindDone[kindForState[lexState][state]] = true;
          if (cnt++ > 0)
             retVal += ", ";
          if (cnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[kindForState[lexState][state]];
       }
     }
    }
    if (cnt == 0)
       return "{  }";
    else
       return "{ " + retVal + " }";
  }

