\#include "JJT${PARSER_NAME}State.h"

  _JJT${PARSER_NAME}State::_JJT${PARSER_NAME}State() {
    nodes = new std::vector<Node>();
    marks = new std::vector<int>();
    sp = 0;
    mk = 0;
  }

  /* Determines whether the current node was actually closed and
     pushed.  This should only be called in the final user action of a
     node scope.  */
  boolean _JJT${PARSER_NAME}State::nodeCreated() {
    return node_created;
  }

  /* Call this to reinitialize the node stack.  It is called
     automatically by the parser's ReInit() method. */
  void _JJT${PARSER_NAME}State::reset() {
    nodes->clear();
    marks->clear();
    sp = 0;
    mk = 0;
  }

  /* Returns the root node of the AST.  It only makes sense to call
     this after a successful parse. */
  Node _JJT${PARSER_NAME}State::rootNode() {
    return nodes->at(0);
  }

  /* Pushes a node on to the stack. */
  void _JJT${PARSER_NAME}State::pushNode(Node n) {
    nodes->push_back(n);
    ++sp;
  }

  /* Returns the node on the top of the stack, and remove it from the
     stack.  */
  Node _JJT${PARSER_NAME}State::popNode() {
    if (--sp < mk) {
      mk = marks->back();
      marks->resize(marks->size()-1);
    }
    Node ret = nodes->back();
    nodes->resize(nodes->size()-1);
    return ret;
  }

  /* Returns the node currently on the top of the stack. */
  Node _JJT${PARSER_NAME}State::peekNode() {
    return nodes->back();
  }

  /* Returns the number of children on the stack in the current node
     scope. */
  int _JJT${PARSER_NAME}State::nodeArity() {
    return sp - mk;
  }


  void _JJT${PARSER_NAME}State::clearNodeScope(Node n) {
    while (sp > mk) {
      popNode();
    }
    mk = marks->back();
    marks->resize(marks->size()-1);
  }


  void _JJT${PARSER_NAME}State::openNodeScope(Node n) {
    marks->push_back(mk);
    mk = sp;
    n->jjtOpen();
  }


  /* A definite node is constructed from a specified number of
     children.  That number of nodes are popped from the stack and
     made the children of the definite node.  Then the definite node
     is pushed on to the stack. */
  void _JJT${PARSER_NAME}State::closeNodeScope(Node n, int num) {
    mk = marks->back();
    marks->resize(marks->size()-1);
    while (num-- > 0) {
      Node c = popNode();
      c->jjtSetParent(n);
      n->jjtAddChild(c, num);
    }
    n->jjtClose();
    pushNode(n);
    node_created = true;
  }


  /* A conditional node is constructed if its condition is true.  All
     the nodes that have been pushed since the node was opened are
     made children of the conditional node, which is then pushed
     on to the stack.  If the condition is false the node is not
     constructed and they are left on the stack. */
  void _JJT${PARSER_NAME}State::closeNodeScope(Node n, boolean condition) {
    if (condition) {
      int a = nodeArity();
      mk = marks->back();
      marks->resize(marks->size()-1);
      while (a-- > 0) {
        Node c = popNode();
        c->jjtSetParent(n);
        n->jjtAddChild(c, a);
      }
      n->jjtClose();
      pushNode(n);
      node_created = true;
    } else {
      mk = marks->back();
      marks->resize(marks->size()-1);
      node_created = false;
    }
  }

  _JJT${PARSER_NAME}State::~_JJT${PARSER_NAME}State() {
    delete marks;
    delete nodes;
  }
