\#include "TokenMgrError.h"
  /**
   * Replaces unprintable characters by their escaped (or unicode escaped)
   * equivalents in the given string
   */
   String _TokenMgrError::addEscapes(String str) {
    /*StringBuffer retval;
    char ch;
    for (int i = 0; i < str.length(); i++) {
      switch (str[i])
      {
        case 0 :
          continue;
        case '\b':
          retval.append("\\b");
          continue;
        case '\t':
          retval.append("\\t");
          continue;
        case '\n':
          retval.append("\\n");
          continue;
        case '\f':
          retval.append("\\f");
          continue;
        case '\r':
          retval.append("\\r");
          continue;
        case '\"':
          retval.append("\\\"");
          continue;
        case '\'':
          retval.append("\\\'");
          continue;
        case '\\':
          retval.append("\\\\");
          continue;
        default:
          //if ((ch = str[i]) < 0x20 || ch > 0x7e) {
            //String s = "0000" + Integer.toString(ch, 16);
            //retval.append("\\u" + s.substring(s.length() - 4, s.length()));
          //} else {
            retval.append(ch);
          //}
          continue;
      }
    }
    return retval.toString();
    */
    return str;
  }

  /**
   * Returns a detailed message for the Error when it is thrown by the
   * token manager to indicate a lexical error.
   * Parameters :
   *    EOFSeen     : indicates if EOF caused the lexical error
   *    curLexState : lexical state in which this error occurred
   *    errorLine   : line number when the error occurred
   *    errorColumn : column number when the error occurred
   *    errorAfter  : prefix that was seen before this error occurred
   *    curchar     : the offending character
   * Note: You can customize the lexical error message by modifying this method.
   */
    String _TokenMgrError::LexicalError(bool EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
    char *s = new char[1024]; // tmp hack
    snprintf(s, 1024, "Lexical error at line %d, column %d.  Encountered: %c ( %d ) after : \"%s\"", errorLine , errorColumn , curChar, (int)curChar, errorAfter.c_str());
    return (String)s;
  }

  /**
   * You can also modify the body of this method to customize your error messages.
   * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not
   * of end-users concern, so you can return something like :
   *
   *     "Internal Error : Please file a bug report .... "
   *
   * from this method for such cases in the release version of your parser.
   */
  String _TokenMgrError::getMessage() {
    return message;
  }

  /*
   * Constructors of various flavors follow.
   */

  /** No arg constructor. */
  _TokenMgrError::_TokenMgrError() {
  }

  /** Constructor with message and reason. */
  _TokenMgrError::_TokenMgrError(String message, int reason) {
    errorCode = reason;
  }

  /** Full Constructor. */
  _TokenMgrError::_TokenMgrError(bool EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {
    message = LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar);
   errorCode = reason;
  }
