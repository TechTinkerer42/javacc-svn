  /** Reinitialise parser. */
  void ${tokMgrClassName}::ReInit(${charStreamName} stream, int lexState, ${parserClassName} *parserArg) {
    if (input_stream) delete input_stream;
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = lexState;
    input_stream = stream;
    debugStream = stdout;
    ReInitRounds();
    SwitchTo(lexState);
    parser = parserArg;
  }

  void ${tokMgrClassName}::ReInitRounds() {
    int i;
    jjround = 0x80000001;
    for (i = ${stateSetSize}; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Switch to specified lex state. */
  void ${tokMgrClassName}::SwitchTo(int lexState) {
    if (lexState >= ${lexStateNameLength} || lexState < 0)
      throw 1;//new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

  /** Constructor. */
  ${tokMgrClassName}::${tokMgrClassName} (${charStreamName} stream, int lexState, ${parserClassName} *parserArg){
    if (sizeof(long) < 8)
       throw "Size of long should be 8 bytes.";
    input_stream = null;
    ReInit(stream, lexState, parserArg);
  }

  // Destructor
  ${tokMgrClassName}::~${tokMgrClassName} () {
    if (input_stream) delete input_stream;
  }
